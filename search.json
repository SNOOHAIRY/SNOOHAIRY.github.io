[{"title":"类的友元","url":"/2020/04/22/类的友元/","content":"\n## c++课堂随笔\n\n### 友元函数（friend）\n\n类中私有和保护的成员在类外不能被访问。而若是想在类B中嵌入类A的对象，此时B的成员函数是无法直接访问A的私有成员的。从数据安全的角度来说，这无疑是最安全的，因为内嵌的部件相当于一个黑盒。\n\n其中的不便显而易见：下列例子实现形式就会出现编译错误。\n\n```c++\nvoid B::set(int i){\n\ta.x=i;\n}\n```\n\n这时候，友元函数就体现出了它的作用。先来看看**友元关系**是啥。\n\n友元关系提供了不同类和对象的成员函数之间、类的成员函数与一般函数之间进行数据共享的机制。**也就是说，通过友元关系，一个普通函数或者类的成员函数可以访问封装于另一个类中的数据。**虽然这是对数据隐蔽和封装的破坏，但这实现了数据的共享。\n\n在类中，用关键字**friend**将函数或类声明为友元。友元是一般函数或类的成员函数，称为友元函数；是类，则成为友元类，**友元类的所有成员函数都自动成为友元函数。**\n\n声明一般格式为:\n\n```c++\nfriend <type> FuncName(<args>);\n```\n\n友元函数不是成员函数，用法和普通函数完全一致。\n\n","tags":["随堂笔记","C++"],"categories":["C++"]},{"title":"LR(1)文法","url":"/2020/04/21/LR(1)文法/","content":"## 例子引入\n题目及分析如图（带空串）\n![LR(1)经典例题分析](https://img-blog.csdnimg.cn/20200421160500204.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjA2ODU4,size_16,color_FFFFFF,t_70#pic_center)\n注意：在写分析表时，由哪一个式子归约由第二个项目决定\n分析式如下：\n\n\n下一小节：LALR文法\n","tags":["编译原理","随堂笔记","hide"],"categories":["编译原理"]},{"title":"关系代数和SQL课堂测试第四关","url":"/2020/04/20/关系代数和SQL课堂测试第四关/","content":"\n## 第四关\n### 1.厂商A的产品升级，所有pc速度提高100，硬盘容量增加50，价格上调300。\n\n```sql\nUpdate pc SET pc.speed = pc.speed +100,pc.hd=pc.hd+50,pc.price=pc.price+300\nFROM product INNER JOIN pc ON product.model=pc.model\nWHERE product.maker='A'\n```\n\n### 2.厂商E新增一种pc产品，型号1090，速度200，内存128，硬盘160，价格800。\n\n```sql\nINSERT INTO pc VALUES (\"1090\",200,128,160,800)\nINSERT INTO product VALUES (\"E\",\"1090\",\"pc\")\n```\n\n### 3.厂商C生产的laptop，型号2013停产，需要从相关关系种去除。\n\n```sql\nDELETE a FROM product a\nINNER JOIN laptop b ON a.model = b.model\nWHERE a.maker='C' and a.model = '2013'\n```\n\n### 4.厂商A生产的产品1001型号变更为1091，其余信息不变。\n\n```sql\nUpdate b SET b.model = '1091' FROM product a INNER JOIN pc b\nON a.model=b.model WHERE a.maker='A' and b.model = '1001'\n\nUpdate a SET a.model = '1091' FROM product a \nWHERE a.model = '1001'\n```\n\n### 5.厂商H破产，所有其生产的产品需移除。\n\n```sql\nDELETE b FROM product a INNER JOIN pc b ON a.model = b.model\nWHERE a.maker = 'H'\nDELETE b FROM product a INNER JOIN laptop b ON a.model = b.model\nWHERE a.maker = 'H'\nDELETE b FROM product a INNER JOIN printer b ON a.model = b.model\nWHERE a.maker = 'H'\nDELETE a FROM product a\nWHERE a.maker ='H'\n```\n\n","tags":["hide"],"categories":["homework","数据库实训","关系代数"]},{"title":"关系代数和SQL课堂测试第三关","url":"/2020/04/20/关系代数和SQL课堂测试第三关/","content":"\n## 第三关\n\n### 1.查询具有同样处理速度和同样内存大小的PC对(显示满足条件的pc对的型号,同样的pc对只出现1次，如001 与 002 符合条件， 则仅出现001 002，不出现002 001）。\n\n```sql\nSELECT pc1.model AS model, pc2.model AS model FROM \npc AS pc1 cross JOIN pc AS pc2 \nwhere pc1.speed=pc2.speed AND pc1.ram=pc2.ram AND pc1.model < pc2.model\n```\n\n### 2.查询至少生产三种不同处理速度电脑（含pc和laptop）的厂商。\n```sql\nSELECT maker FROM(\nSELECT maker, product.model, speed FROM \nproduct JOIN pc ON product.model = pc.model \nUNION\nSELECT maker, product.model, speed FROM \nproduct JOIN laptop ON product.model = laptop.model) AS a\nGROUP BY maker having count(distinct speed) >= 3\n```\n### 3.统计出pc，laptop，printer三种产品的不同型号数量，并按数量从大到小排序。\n\n```sql\nSELECT type, count(model) AS c FROM (\nSELECT type, product.model AS model FROM \nproduct JOIN pc ON product.model = pc.model \nUNION\nSELECT type, product.model AS model FROM \nproduct JOIN laptop ON product.model = laptop.model\nUNION \nSELECT product.type, product.model AS model FROM \nproduct JOIN printer ON product.model = printer.model) AS a \nGROUP BY type\nORDER BY c desc\n```\n\n### 4.有客户有1500元钱，买laptop或pc，要求硬盘容量不小于80，请给出可能的产品型号，生产厂商。\n\n```sql\nSELECT maker, model FROM (\nSELECT product.maker AS maker, product.model, hd, price FROM \nproduct JOIN pc ON product.model = pc.model\nUNION \nSELECT product.maker AS maker, product.model, hd, price FROM \nproduct JOIN laptop ON product.model = laptop.model\n) AS a where price<=1500 AND hd>=80 \nORDER BY model\n```\n\n### 5.找出至少生产5种不同型号产品的厂商。\n\n```sql\nSELECT maker FROM \n(SELECT maker, count(model) AS model_num FROM \nproduct GROUP BY maker) AS a\nwhere model_num>=5\n```\n\n","tags":["hide"],"categories":["homework","数据库实训","关系代数"]},{"title":"关系代数和SQL课堂测试第二关","url":"/2020/04/20/关系代数和SQL课堂测试第二关/","content":"\n## 第二关\n### 1.分类统计厂商（maker）A生产的各种产品的数量。（提示：用分组操作符）\n```sql\nSELECT type, count(model) \nFROM (SELECT * FROM product WHERE maker='A') \nAS a GROUP BY type \n```\n### 2.查询所有彩色激光打印机的生产商及型号。\n\n```sql\nSELECT maker, product.model FROM product \nJOIN printer ON product.model=printer.model \nWHERE color='T' AND printer.type='lASer'\n```\n### 3.找出生产产品型号最多的厂商。\n\n```sql\nSELECT top 1 maker FROM product \nGROUP BY maker ORDER BY count(model) desc\n```\n### 4.查询出哪个生产厂商的笔记本电脑的硬盘容量至少100G。\n\n```sql\nSELECT maker FROM\n(SELECT maker, min(hd) AS min_hd FROM\nlaptop JOIN product ON \nlaptop.model = product.model GROUP BY maker) AS a\nWHERE min_hd >= 100;\n```\n\n### 5.找出那些既出售笔记本电脑又出售PC的厂商。\n\n```sql\nSELECT product.maker FROM product\nINNER JOIN pc ON product.model = pc.model\nGROUP BY product.maker INTERSECT\nSELECT product.maker FROM product\nINNER JOIN laptop ON product.model = laptop.model\n```\n\n","tags":["hide"],"categories":["homework","数据库实训","关系代数"]},{"title":"关系代数和SQL课堂测试","url":"/2020/04/20/关系代数和SQL课堂测试/","content":"\n## 第一关\n{% post_link 关系代数和SQL课堂测试第一关 %}\n## 第二关\n{% post_link 关系代数和SQL课堂测试第二关 %}\n## 第三关\n{% post_link 关系代数和SQL课堂测试第三关 %}\n## 第四关\n{% post_link 关系代数和SQL课堂测试第四关 %}\n","tags":["数据库","题解汇总"],"categories":["homeword"]},{"title":"关系代数和SQL课堂测试第一关","url":"/2020/04/20/关系代数和SQL课堂测试第一关/","content":"\n## 第一关\n### 1.查询生产pc也生产laptop的厂商。\n```sql\nSELECT product.maker FROM product \nJOIN laptop ON product.model = laptop.model\nINTERSECT \nSELECT product.maker FROM product \nJOIN pc ON product.model = pc.model\n```\n### 2.查询生产型号为2001的厂商信息及该型号所属产品的种类。\n\n```sql\nSELECT maker,type FROM product WHERE model='2001'\n```\n### 3.查询厂商A 生产的PC中price大于900的产品型号。\n\n```sql\nSELECT product.model FROM product\nINNER JOIN pc ON product.model=pc.model\nWHERE pc.price>900 AND product.maker='A'\n```\n### 4.查询生产ink-jet的打印机的厂商及价格。\n\n```sql\nSELECt product.maker,printer.price FROM product\nJOIN printer ON product.model = printer.model\nWHERE printer.type='ink-jet'\n```\n\n### 5.查询厂商B生产的所有产品的型号和价格。\n\n```sql\nSELECT product.model,price FROM product,pc WHERE product.model=pc.model AND maker='B' \nUNION\nSELECT product.model,price FROM product,laptop WHERE product.model=laptop.model AND maker='B'\nUNION\nSELECT product.model,price FROM product,printer WHERE product.model=printer.model AND maker='B'\n```\n\n","tags":["hide"],"categories":["homework","数据库实训","关系代数"]},{"title":"安装好的hexo发布本地博客到GitHub","url":"/2020/04/19/安装好的hexo发布本地博客到GitHub/","content":"\nWelcome to [My blogs](https://SNOOHAIRY.github.io/)!\n\n注意，以下的每一步操作都在你的本地博客文件目录下执行\n\n## [Hexo](https://hexo.io/zh-cn/)预览本地博客文件\n\n### 预览本地博客 \n调用cmd在命令行输入hexo安装的位置 再输入命令\n\n```bash\nhexo s -p 1234\n```\n这里的1234是本地地址，可以通过浏览器访问：http://localhost:1234 通过编写本地.md文件，保存之后刷新浏览器即可看到预览效果。\n\n当然如果选择自己的本地博客目录在空白处右键选择 Git Bash Here,输入\n```bash\nhexo s\n```\n就会分配一个默认的地址 http://localhost:4000 ,复制到浏览器也可浏览\n\n### 关于hexo的配置过程 稍后更新。\n\n## [Hexo](https://hexo.io/zh-cn/)发布本地博客到GitHub\n\n如果打开了本地预览要先关闭本地预览文件（ctrl+c），然后在命令行中敲入\n```bash\nhexo g\n```\n```bash\nhexo d\n```\n然后会有提示输入Github的用户名，输入Github的账户密码 点击login即可更新同步。\n如果期间出现了问题，执行hexo g的时候出现错误,可能是没有安装hexo-deployer-git 在命令行输入\n```bash\nnmp install hexo-deployer-git --save\n```\n再执行一次前两个命令即可\n若又出现 something's wrong....\n```bash\nRun\n    git config --global user.email\"you@example.com\"\n    git config   global user.name\"Your Name\"\n    ...\n```\n则分别复制 把\"\"里的提示词分别改成你的邮件和用户名即可，注意是你申请github时用的邮件和用户名。\n然后回车再输入开始的两个操作，输入hexo -d会有一个github的登录界面，登录即可。\n\n再回到你的github博客网址刷新就可以看到你编写的博客啦。","tags":["hexo"],"categories":["hexo"]},{"title":"hello-world","url":"/2020/04/04/hello-world/","content":"---\nHELLO WORLD\n---\nWelcome to [My blogs](https://HP1020.github.io/)!\n\n```bash\ncout<<\"hello world\"<<endl;\n```"}]